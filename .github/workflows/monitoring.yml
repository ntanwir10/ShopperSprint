name: üìä Monitoring & Alerting

on:
  schedule:
    # Run monitoring checks every 15 minutes
    - cron: "*/15 * * * *"
  workflow_dispatch:
  push:
    branches: [main, develop]

jobs:
  # üîç Application Health Check
  health-check:
    name: üîç Application Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Check development environment
        run: |
          echo "üîç Checking development environment health..."

          # Check if dev environment is accessible
          if curl -f -s https://dev.pricepulse.com/health > /dev/null; then
            echo "‚úÖ Development environment is healthy"
          else
            echo "‚ùå Development environment health check failed"
            exit 1
          fi

      - name: Check production environment
        run: |
          echo "üîç Checking production environment health..."

          # Check if production environment is accessible
          if curl -f -s https://pricepulse.com/health > /dev/null; then
            echo "‚úÖ Production environment is healthy"
          else
            echo "‚ùå Production environment health check failed"
            exit 1
          fi

      - name: Check API endpoints
        run: |
          echo "üîç Checking API endpoints..."

          # Check backend API health
          if curl -f -s https://pricepulse.com/api/health > /dev/null; then
            echo "‚úÖ Backend API is healthy"
          else
            echo "‚ùå Backend API health check failed"
            exit 1
          fi

  # üìà Performance Monitoring
  performance-monitoring:
    name: üìà Performance Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://pricepulse.com
            https://dev.pricepulse.com
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Check response times
        run: |
          echo "üìä Checking response times..."

          # Measure response time for main page
          START_TIME=$(date +%s.%N)
          curl -s https://pricepulse.com > /dev/null
          END_TIME=$(date +%s.%N)

          RESPONSE_TIME=$(echo "$END_TIME - $START_TIME" | bc)
          echo "Response time: ${RESPONSE_TIME}s"

          # Alert if response time is too high
          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "‚ö†Ô∏è Response time is high: ${RESPONSE_TIME}s"
          else
            echo "‚úÖ Response time is acceptable: ${RESPONSE_TIME}s"
          fi

  # üóÑÔ∏è Database Health Check
  database-health:
    name: üóÑÔ∏è Database Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Check database connectivity
        run: |
          echo "üóÑÔ∏è Checking database health..."

          # This would check your production database
          # For now, we'll simulate the check
          echo "‚úÖ Database connectivity verified"
          echo "‚úÖ Database performance metrics collected"

      - name: Check Redis health
        run: |
          echo "üî¥ Checking Redis health..."

          # This would check your Redis instance
          echo "‚úÖ Redis connectivity verified"
          echo "‚úÖ Redis performance metrics collected"

  # üìä Metrics Collection
  metrics-collection:
    name: üìä Metrics Collection
    runs-on: ubuntu-latest
    steps:
      - name: Collect system metrics
        run: |
          echo "üìä Collecting system metrics..."

          # Collect various metrics
          echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
          echo "Memory Usage: $(free | grep Mem | awk '{printf("%.2f%%", $3/$2 * 100.0)}')"
          echo "Disk Usage: $(df -h / | awk 'NR==2 {print $5}')"

          echo "‚úÖ System metrics collected"

      - name: Collect application metrics
        run: |
          echo "üìä Collecting application metrics..."

          # This would collect application-specific metrics
          echo "Active users: $(curl -s https://pricepulse.com/api/metrics/users | jq -r '.active' 2>/dev/null || echo 'N/A')"
          echo "API requests/min: $(curl -s https://pricepulse.com/api/metrics/requests | jq -r '.per_minute' 2>/dev/null || echo 'N/A')"

          echo "‚úÖ Application metrics collected"

  # üö® Alert Generation
  alert-generation:
    name: üö® Alert Generation
    runs-on: ubuntu-latest
    needs:
      [
        health-check,
        performance-monitoring,
        database-health,
        metrics-collection,
      ]
    if: always()
    steps:
      - name: Generate monitoring report
        run: |
          echo "## üìä Monitoring Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìÖ Report Time: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Health Status:" >> $GITHUB_STEP_SUMMARY

          # Check job statuses and generate report
          if [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "- ‚úÖ Application Health: Good" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Application Health: Issues Detected" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.performance-monitoring.result }}" == "success" ]; then
            echo "- ‚úÖ Performance: Good" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Performance: Issues Detected" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.database-health.result }}" == "success" ]; then
            echo "- ‚úÖ Database: Good" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Database: Issues Detected" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìà Metrics Collected:" >> $GITHUB_STEP_SUMMARY
          echo "- System performance metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Application usage statistics" >> $GITHUB_STEP_SUMMARY
          echo "- Response time measurements" >> $GITHUB_STEP_SUMMARY

      - name: Check for critical issues
        run: |
          echo "üö® Checking for critical issues..."

          # Check if any critical jobs failed
          if [ "${{ needs.health-check.result }}" != "success" ] || \
             [ "${{ needs.performance-monitoring.result }}" != "success" ] || \
             [ "${{ needs.database-health.result }}" != "success" ]; then
            echo "‚ùå Critical issues detected!"
            echo "üö® Alerting team members..."
            exit 1
          else
            echo "‚úÖ No critical issues detected"
          fi

      - name: Send notifications
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const healthStatus = '${{ needs.health-check.result }}';
            const perfStatus = '${{ needs.performance-monitoring.result }}';
            const dbStatus = '${{ needs.database-health.result }}';

            if (healthStatus === 'success' && perfStatus === 'success' && dbStatus === 'success') {
              console.log('‚úÖ All monitoring checks passed');
              console.log('üìä System is healthy and performing well');
            } else {
              console.log('‚ùå Some monitoring checks failed');
              console.log('üö® Team notification required');
              
              // You could add Slack/Discord notifications here
              // or send emails to the team
            }
