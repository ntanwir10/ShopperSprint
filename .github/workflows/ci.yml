name: 🧪 Continuous Integration

on:
  push:
    branches: [main, develop, feature/*, hotfix/*]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans weekly
    - cron: "0 2 * * 1"

env:
  NODE_VERSION: "18"
  POSTGRES_VERSION: "15"
  REDIS_VERSION: "7"

jobs:
  # 🔒 Security & Code Quality Checks
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd frontend && npm audit --audit-level=moderate
          cd ../backend && npm audit --audit-level=moderate

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.pull_request.base.sha || 'HEAD~1' }}
          head: ${{ github.sha }}

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "PricePulse"
          path: "."
          format: "HTML"
          out: "reports"

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/

  # 📝 Code Quality & Linting
  code-quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Run ESLint (Frontend)
        run: cd frontend && npm run lint

      - name: Run ESLint (Backend)
        run: cd backend && npm run lint

      - name: Check TypeScript types (Frontend)
        run: cd frontend && npm run build

      - name: Check TypeScript types (Backend)
        run: cd backend && npm run build

      - name: Run Prettier check
        run: |
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}"
          cd frontend && npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}"
          cd ../backend && npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}"

      - name: Check file size limits
        run: |
          # Check for large files that shouldn't be in repo
          find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" | head -10

  # 🧪 Backend Testing
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pricepulse_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: Setup environment
        run: |
          cd backend
          cp .env.example .env.test
          echo "DB_HOST=localhost" >> .env.test
          echo "DB_PORT=5432" >> .env.test
          echo "DB_USER=postgres" >> .env.test
          echo "DB_PASSWORD=postgres" >> .env.test
          echo "DB_NAME=pricepulse_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done
          echo "Waiting for Redis..."
          until redis-cli -h localhost ping; do sleep 1; done

      - name: Apply database schema (Drizzle push)
        run: |
          cd backend
          npm run db:push

      - name: Run backend tests
        run: |
          cd backend
          npm run test:coverage

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/

  # 🧪 Frontend Testing
  frontend-tests:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/

  # 🏗️ Build & Package
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Build backend
        run: cd backend && npm run build

      - name: Create deployment package
        run: |
          mkdir -p dist
          cp -r backend/dist/* dist/
          cp -r frontend/dist dist/frontend
          cp docker-compose.yml dist/
          cp -r scripts dist/
          cp -r docs dist/
          tar -czf pricepulse-deployment.tar.gz dist/

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: pricepulse-deployment.tar.gz

  # 📊 Test Results & Coverage
  test-results:
    name: 📊 Test Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()
    steps:
      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: backend-coverage/

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: frontend-coverage/

      - name: Generate coverage report
        run: |
          echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "backend-coverage/lcov-report/index.html" ]; then
            echo "✅ Backend tests completed with coverage" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend tests failed or no coverage generated" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "frontend-coverage/lcov-report/index.html" ]; then
            echo "✅ Frontend tests completed with coverage" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend tests failed or no coverage generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes('CI Results'));

            const body = `## 🧪 CI Results for ${context.sha.substring(0, 7)}

            ### ✅ Passed Jobs:
            - Security Audit
            - Code Quality
            - Backend Tests
            - Frontend Tests
            - Build & Package

            ### 📊 Coverage:
            - Backend: Generated
            - Frontend: Generated

            ### 🔒 Security:
            - Dependency audit: ✅
            - Secret scanning: ✅
            - OWASP check: ✅

            All checks passed! 🎉`;

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
