name: 🚀 Deploy to Production

on:
  workflow_run:
    workflows: ["🧪 Continuous Integration"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Production environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  ENVIRONMENT: production
  DOMAIN: pricepulse.com

jobs:
  # 🔒 Production Security Gate
  production-security-gate:
    name: 🔒 Production Security Gate
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Verify CI workflow success
        run: |
          echo "✅ CI workflow completed successfully"
          echo "🔒 Proceeding to production security checks..."

      - name: Check for security vulnerabilities
        run: |
          echo "Running additional security checks for production..."
          # This would run production-specific security scans
          echo "Security checks passed"

      - name: Verify no secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.workflow_run.head_sha }}~1
          head: ${{ github.event.workflow_run.head_sha }}

  # 🧪 Production Smoke Tests
  production-smoke-tests:
    name: 🧪 Production Smoke Tests
    runs-on: ubuntu-latest
    needs: production-security-gate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Run production tests
        run: |
          cd backend && npm run test:run
          cd ../frontend && npm run test:run

      - name: Build verification
        run: |
          cd frontend && npm run build
          cd ../backend && npm run build

      - name: Security scan
        run: |
          echo "Running final security scan before production deployment..."
          npm audit --audit-level=high
          cd frontend && npm audit --audit-level=high
          cd ../backend && npm audit --audit-level=high

  # 🚀 Production Deployment
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [production-security-gate, production-smoke-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Build application
        run: |
          cd frontend && npm run build
          cd ../backend && npm run build

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push production images
        run: |
          # Build frontend image
          docker build -t ghcr.io/${{ github.repository }}/frontend:prod-${{ github.sha }} ./frontend
          docker build -t ghcr.io/${{ github.repository }}/frontend:latest ./frontend
          docker push ghcr.io/${{ github.repository }}/frontend:prod-${{ github.sha }}
          docker push ghcr.io/${{ github.repository }}/frontend:latest

          # Build backend image
          docker build -t ghcr.io/${{ github.repository }}/backend:prod-${{ github.sha }} ./backend
          docker build -t ghcr.io/${{ github.repository }}/backend:latest ./backend
          docker push ghcr.io/${{ github.repository }}/backend:prod-${{ github.sha }}
          docker push ghcr.io/${{ github.repository }}/backend:latest

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "This is a critical deployment - ensuring zero downtime..."

          # This would use your production deployment tool
          # Examples: Kubernetes, Docker Swarm, AWS ECS, etc.
          echo "Production deployment completed successfully"

      - name: Production health check
        run: |
          echo "🔍 Running production health checks..."

          # Wait for deployment to stabilize
          sleep 60

          # Comprehensive health checks
          curl -f https://${{ env.DOMAIN }}/health || exit 1

          echo "✅ Production health checks passed"

      - name: Performance validation
        run: |
          echo "📊 Running performance validation..."

          # Basic performance checks
          # This could include Lighthouse CI, WebPageTest, etc.
          echo "Performance validation completed"

      - name: Notify production deployment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const environment = '${{ env.ENVIRONMENT }}';
            const domain = '${{ env.DOMAIN }}';
            const sha = '${{ github.sha }}';

            if (status === 'success') {
              console.log(`🚀 Successfully deployed to ${environment}`);
              console.log(`🌐 Production URL: https://${domain}`);
              console.log(`📦 Image tags: prod-${sha.substring(0, 7)}`);
              
              // You could add Slack/Discord notifications here
            } else {
              console.log(`❌ Production deployment failed`);
            }

  # 📊 Post-production Verification
  post-production-verification:
    name: 📊 Post-production Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    steps:
      - name: Run production integration tests
        run: |
          echo "🧪 Running production integration tests..."
          # Tests against the live production environment
          echo "Production integration tests completed"

      - name: Load testing
        run: |
          echo "⚡ Running load tests..."
          # Basic load testing to ensure production can handle traffic
          echo "Load testing completed"

      - name: Monitoring verification
        run: |
          echo "📈 Verifying monitoring and alerting..."
          # Ensure all monitoring systems are working
          echo "Monitoring verification completed"

      - name: Final status report
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const environment = '${{ env.ENVIRONMENT }}';

            if (status === 'success') {
              console.log(`🎉 ${environment} deployment and verification completed successfully!`);
              console.log(`🚀 PricePulse is now live in production!`);
            } else {
              console.log(`❌ ${environment} deployment verification failed`);
              console.log(`🚨 Immediate attention required!`);
            }
