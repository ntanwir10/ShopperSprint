name: 🚀 Production Deployment Pipeline

on:
  push:
    branches: [main] # Only production deployments

  # Manual trigger for emergency deploys
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production

env:
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🏗️ Production Build
  production-build:
    name: 🏗️ Production Build
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: 🏗️ Build applications
        run: |
          echo "🏗️ Building applications for production..."
          npm run build:frontend
          npm run build:backend
          echo "✅ Production build completed!"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            frontend/dist
            backend/dist
          retention-days: 7

  # 🐳 Docker Build & Push
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: production-build
    strategy:
      matrix:
        component: [frontend, backend]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build

      - name: 🗂️ Organize build artifacts
        run: |
          mkdir -p ${{ matrix.component }}/dist
          if [ "${{ matrix.component }}" = "frontend" ]; then
            cp -r frontend/dist/* ${{ matrix.component }}/dist/ 2>/dev/null || true
          else
            cp -r backend/dist/* ${{ matrix.component }}/dist/ 2>/dev/null || true
          fi

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 🌟 Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [production-build, docker-build]
    if: github.ref == 'refs/heads/main'
    # environment: production  # Uncomment after setting up GitHub environment

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🌟 Deploy to Railway Production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "🌟 Deploying to production environment..."
          if [ -n "$RAILWAY_TOKEN" ]; then
            echo "Using Railway CLI for deployment..."
            # Install Railway CLI
            npm install -g @railway/cli
            # Deploy using Railway
            railway deploy --service frontend
            railway deploy --service backend
            echo "✅ Railway deployment completed!"
          else
            echo "⚠️ No Railway token found"
            echo "Add RAILWAY_TOKEN secret to enable automatic deployment"
            echo "For now, deploy manually using: npm run deploy:railway"
          fi

      - name: 🔍 Production health check
        run: |
          echo "🔍 Running post-deployment health checks..."
          sleep 30  # Wait for deployment to complete
          # Add health check commands here
          # curl -f https://your-app.railway.app/health || echo "Health check failed"
          echo "✅ Production deployment completed!"

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build completed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Docker images built and pushed**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Production deployment initiated**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Deployment Info:" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${GITHUB_REF#refs/heads/}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: Production deployment only" >> $GITHUB_STEP_SUMMARY
          echo "- **Local CI**: All testing done locally" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**💡 Note**: This workflow only handles production deployment." >> $GITHUB_STEP_SUMMARY
          echo "All CI/CD tasks (testing, type-checking, linting) are done locally using:" >> $GITHUB_STEP_SUMMARY
          echo "- \`npm run ci\` - Full local CI pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- \`npm run test\` - Run tests locally" >> $GITHUB_STEP_SUMMARY
          echo "- \`npm run type-check\` - Type checking" >> $GITHUB_STEP_SUMMARY
          echo "- \`npm run lint\` - Code quality checks" >> $GITHUB_STEP_SUMMARY
